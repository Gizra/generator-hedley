var _elm_lang$http$Http_Progress$onSelfMsg = F3(
	function (router, _p0, state) {
		return _elm_lang$core$Task$succeed(state);
	});
var _elm_lang$http$Http_Progress$addSub = F2(
	function (_p1, subDict) {
		var _p2 = _p1;
		var _p3 = _p2._1;
		var request = _p3.request;
		var uid = A2(
			_elm_lang$core$Basics_ops['++'],
			_p2._0,
			A2(_elm_lang$core$Basics_ops['++'], request.method, request.url));
		return A3(_elm_lang$core$Dict$insert, uid, _p3, subDict);
	});
var _elm_lang$http$Http_Progress$collectSubs = function (subs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$http$Http_Progress$addSub, _elm_lang$core$Dict$empty, subs);
};
var _elm_lang$http$Http_Progress$toTask = F2(
	function (router, _p4) {
		var _p5 = _p4;
		return A2(
			_elm_lang$core$Task$onError,
			function (_p6) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p5.toError(_p6));
			},
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				A2(
					_elm_lang$http$Native_Http.toTask,
					_p5.request,
					_elm_lang$core$Maybe$Just(
						function (_p7) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								_p5.toProgress(_p7));
						}))));
	});
var _elm_lang$http$Http_Progress$spawnRequests = F3(
	function (router, trackedRequests, state) {
		var _p8 = trackedRequests;
		if (_p8.ctor === '[]') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			return A2(
				_elm_lang$core$Task$andThen,
				function (process) {
					return A3(
						_elm_lang$http$Http_Progress$spawnRequests,
						router,
						_p8._1,
						A3(_elm_lang$core$Dict$insert, _p8._0._0, process, state));
				},
				_elm_lang$core$Process$spawn(
					A2(_elm_lang$http$Http_Progress$toTask, router, _p8._0._1)));
		}
	});
var _elm_lang$http$Http_Progress$onEffects = F3(
	function (router, subs, state) {
		var rightStep = F3(
			function (id, trackedRequest, _p9) {
				var _p10 = _p9;
				return {
					ctor: '_Tuple3',
					_0: _p10._0,
					_1: _p10._1,
					_2: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: id, _1: trackedRequest},
						_1: _p10._2
					}
				};
			});
		var bothStep = F4(
			function (id, process, _p12, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: A3(_elm_lang$core$Dict$insert, id, process, _p13._1),
					_2: _p13._2
				};
			});
		var leftStep = F3(
			function (id, process, _p14) {
				var _p15 = _p14;
				return {
					ctor: '_Tuple3',
					_0: {
						ctor: '::',
						_0: _elm_lang$core$Process$kill(process),
						_1: _p15._0
					},
					_1: _p15._1,
					_2: _p15._2
				};
			});
		var subDict = _elm_lang$http$Http_Progress$collectSubs(subs);
		var _p16 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			state,
			subDict,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: {ctor: '[]'}
			});
		var dead = _p16._0;
		var ongoing = _p16._1;
		var $new = _p16._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p17) {
				return A3(_elm_lang$http$Http_Progress$spawnRequests, router, $new, ongoing);
			},
			_elm_lang$core$Task$sequence(dead));
	});
var _elm_lang$http$Http_Progress$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$http$Http_Progress$map = F2(
	function (func, _p18) {
		var _p19 = _p18;
		return {
			request: A2(_elm_lang$http$Http_Internal$map, func, _p19.request),
			toProgress: function (_p20) {
				return func(
					_p19.toProgress(_p20));
			},
			toError: function (_p21) {
				return func(
					_p19.toError(_p21));
			}
		};
	});
var _elm_lang$http$Http_Progress$subscription = _elm_lang$core$Native_Platform.leaf('Http.Progress');
var _elm_lang$http$Http_Progress$TrackedRequest = F3(
	function (a, b, c) {
		return {request: a, toProgress: b, toError: c};
	});
var _elm_lang$http$Http_Progress$Done = function (a) {
	return {ctor: 'Done', _0: a};
};
var _elm_lang$http$Http_Progress$Fail = function (a) {
	return {ctor: 'Fail', _0: a};
};
var _elm_lang$http$Http_Progress$Some = function (a) {
	return {ctor: 'Some', _0: a};
};
var _elm_lang$http$Http_Progress$None = {ctor: 'None'};
var _elm_lang$http$Http_Progress$Track = F2(
	function (a, b) {
		return {ctor: 'Track', _0: a, _1: b};
	});
var _elm_lang$http$Http_Progress$track = F3(
	function (id, toMessage, _p22) {
		var _p23 = _p22;
		return _elm_lang$http$Http_Progress$subscription(
			A2(
				_elm_lang$http$Http_Progress$Track,
				id,
				{
					request: A2(
						_elm_lang$http$Http_Internal$map,
						function (_p24) {
							return toMessage(
								_elm_lang$http$Http_Progress$Done(_p24));
						},
						_p23._0),
					toProgress: function (_p25) {
						return toMessage(
							_elm_lang$http$Http_Progress$Some(_p25));
					},
					toError: function (_p26) {
						return toMessage(
							_elm_lang$http$Http_Progress$Fail(_p26));
					}
				}));
	});
var _elm_lang$http$Http_Progress$subMap = F2(
	function (func, _p27) {
		var _p28 = _p27;
		return A2(
			_elm_lang$http$Http_Progress$Track,
			_p28._0,
			A2(_elm_lang$http$Http_Progress$map, func, _p28._1));
	});
_elm_lang$core$Native_Platform.effectManagers['Http.Progress'] = {pkg: 'elm-lang/http', init: _elm_lang$http$Http_Progress$init, onEffects: _elm_lang$http$Http_Progress$onEffects, onSelfMsg: _elm_lang$http$Http_Progress$onSelfMsg, tag: 'sub', subMap: _elm_lang$http$Http_Progress$subMap};
