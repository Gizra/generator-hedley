var _rtfeldman$node_test_runner$Test_Reporter_Json$reportSummary = F2(
	function (duration, results) {
		var failed = _elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filter,
				function (_p0) {
					return A2(
						_elm_lang$core$List$all,
						F2(
							function (x, y) {
								return !_elm_lang$core$Native_Utils.eq(x, y);
							})(_elm_community$elm_test$Expect$pass),
						function (_) {
							return _.expectations;
						}(_p0));
				},
				results));
		var passed = _elm_lang$core$List$length(results) - failed;
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'event',
					_1: _elm_lang$core$Json_Encode$string('runComplete')
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'passed',
						_1: _elm_lang$core$Json_Encode$string(
							_elm_lang$core$Basics$toString(passed))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'failed',
							_1: _elm_lang$core$Json_Encode$string(
								_elm_lang$core$Basics$toString(failed))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'duration',
								_1: _elm_lang$core$Json_Encode$string(
									_elm_lang$core$Basics$toString(duration))
							},
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _rtfeldman$node_test_runner$Test_Reporter_Json$encodeFailure = function (_p1) {
	var _p2 = _p1;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'given',
				_1: _elm_lang$core$Json_Encode$string(_p2.given)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'actual',
					_1: _elm_lang$core$Json_Encode$string(_p2.message)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _rtfeldman$node_test_runner$Test_Reporter_Json$encodeFailures = function (expectations) {
	return _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			_rtfeldman$node_test_runner$Test_Reporter_Json$encodeFailure,
			A2(_elm_lang$core$List$filterMap, _elm_community$elm_test$Expect$getFailure, expectations)));
};
var _rtfeldman$node_test_runner$Test_Reporter_Json$encodeLabels = function (labels) {
	return _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Json_Encode$string,
			_elm_lang$core$List$reverse(labels)));
};
var _rtfeldman$node_test_runner$Test_Reporter_Json$getStatus = function (expectations) {
	var _p3 = A2(_elm_lang$core$List$filterMap, _elm_community$elm_test$Expect$getFailure, expectations);
	if (_p3.ctor === '[]') {
		return 'pass';
	} else {
		return 'fail';
	}
};
var _rtfeldman$node_test_runner$Test_Reporter_Json$reportComplete = function (_p4) {
	var _p5 = _p4;
	var _p6 = _p5.expectations;
	return _elm_lang$core$Maybe$Just(
		_elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'event',
					_1: _elm_lang$core$Json_Encode$string('testCompleted')
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'status',
						_1: _elm_lang$core$Json_Encode$string(
							_rtfeldman$node_test_runner$Test_Reporter_Json$getStatus(_p6))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'labels',
							_1: _rtfeldman$node_test_runner$Test_Reporter_Json$encodeLabels(_p5.labels)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'failures',
								_1: _rtfeldman$node_test_runner$Test_Reporter_Json$encodeFailures(_p6)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'duration',
									_1: _elm_lang$core$Json_Encode$string(
										_elm_lang$core$Basics$toString(_p5.duration))
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}));
};
var _rtfeldman$node_test_runner$Test_Reporter_Json$reportBegin = function (_p7) {
	var _p8 = _p7;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'event',
				_1: _elm_lang$core$Json_Encode$string('runStart')
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'testCount',
					_1: _elm_lang$core$Json_Encode$string(
						_elm_lang$core$Basics$toString(_p8.testCount))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'initialSeed',
						_1: _elm_lang$core$Json_Encode$string(
							_elm_lang$core$Basics$toString(_p8.initialSeed))
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
