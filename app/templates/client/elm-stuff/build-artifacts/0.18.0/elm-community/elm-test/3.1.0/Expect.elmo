var _elm_community$elm_test$Expect$formatDiffs = F2(
	function (diffType, diffs) {
		if (_elm_lang$core$List$isEmpty(diffs)) {
			return '';
		} else {
			var modifier = function () {
				var _p0 = diffType;
				if (_p0.ctor === 'Extra') {
					return '+';
				} else {
					return '-';
				}
			}();
			return function (d) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						modifier,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'[ ',
							A2(_elm_lang$core$Basics_ops['++'], d, ' ]'))));
			}(
				A2(
					_elm_lang$core$String$join,
					', ',
					A2(_elm_lang$core$List$map, _elm_lang$core$Basics$toString, diffs)));
		}
	});
var _elm_community$elm_test$Expect$reportFailure = F3(
	function (comparison, expected, actual) {
		return A2(
			_elm_lang$core$String$join,
			'\n',
			{
				ctor: '::',
				_0: actual,
				_1: {
					ctor: '::',
					_0: '╷',
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Basics_ops['++'], '│ ', comparison),
						_1: {
							ctor: '::',
							_0: '╵',
							_1: {
								ctor: '::',
								_0: expected,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});
var _elm_community$elm_test$Expect$onFail = F2(
	function (str, expectation) {
		var _p1 = expectation;
		if (_p1.ctor === 'Pass') {
			return expectation;
		} else {
			return A2(_elm_community$elm_test$Test_Expectation$Fail, _p1._0, str);
		}
	});
var _elm_community$elm_test$Expect$getFailure = function (expectation) {
	var _p2 = expectation;
	if (_p2.ctor === 'Pass') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{given: _p2._0, message: _p2._1});
	}
};
var _elm_community$elm_test$Expect$fail = _elm_community$elm_test$Test_Expectation$Fail('');
var _elm_community$elm_test$Expect$pass = _elm_community$elm_test$Test_Expectation$Pass;
var _elm_community$elm_test$Expect$compareWith = F4(
	function (label, compare, expected, actual) {
		return A2(compare, actual, expected) ? _elm_community$elm_test$Expect$pass : _elm_community$elm_test$Expect$fail(
			A3(
				_elm_community$elm_test$Expect$reportFailure,
				label,
				_elm_lang$core$Basics$toString(expected),
				_elm_lang$core$Basics$toString(actual)));
	});
var _elm_community$elm_test$Expect$allHelp = F2(
	function (list, query) {
		allHelp:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return _elm_community$elm_test$Expect$pass;
			} else {
				var _p4 = _p3._0(query);
				if (_p4.ctor === 'Pass') {
					var _v5 = _p3._1,
						_v6 = query;
					list = _v5;
					query = _v6;
					continue allHelp;
				} else {
					return _p4;
				}
			}
		}
	});
var _elm_community$elm_test$Expect$all = F2(
	function (list, query) {
		return _elm_lang$core$List$isEmpty(list) ? _elm_community$elm_test$Expect$fail('Expect.all received an empty list. I assume this was due to a mistake somewhere, so I\'m failing this test!') : A2(_elm_community$elm_test$Expect$allHelp, list, query);
	});
var _elm_community$elm_test$Expect$equalLists = F2(
	function (expected, actual) {
		if (_elm_lang$core$Native_Utils.eq(expected, actual)) {
			return _elm_community$elm_test$Expect$pass;
		} else {
			var result = A2(
				_elm_lang$core$Maybe$map,
				function (_p5) {
					var _p6 = _p5;
					var _p9 = _p6._0;
					var _p8 = _p6._2;
					var _p7 = _p6._1;
					return _elm_community$elm_test$Expect$fail(
						A2(
							_elm_lang$core$String$join,
							'\n',
							{
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(actual),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										'first diff at index index ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(_p9),
											A2(
												_elm_lang$core$Basics_ops['++'],
												': +`',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(_p7),
													A2(
														_elm_lang$core$Basics_ops['++'],
														'`, -`',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(_p8),
															'`')))))),
									_1: {
										ctor: '::',
										_0: '╷',
										_1: {
											ctor: '::',
											_0: '│ Expect.equalLists',
											_1: {
												ctor: '::',
												_0: '╵',
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$core$Basics_ops['++'],
														'first diff at index index ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(_p9),
															A2(
																_elm_lang$core$Basics_ops['++'],
																': +`',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_elm_lang$core$Basics$toString(_p8),
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'`, -`',
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_elm_lang$core$Basics$toString(_p7),
																			'`')))))),
													_1: {
														ctor: '::',
														_0: _elm_lang$core$Basics$toString(expected),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}));
				},
				_elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$filterMap,
						function (_p10) {
							var _p11 = _p10;
							var _p13 = _p11._1._1;
							var _p12 = _p11._1._0;
							return _elm_lang$core$Native_Utils.eq(_p13, _p12) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple3', _0: _p11._0, _1: _p12, _2: _p13});
						},
						A2(
							_elm_lang$core$List$indexedMap,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							A3(
								_elm_lang$core$List$map2,
								F2(
									function (v0, v1) {
										return {ctor: '_Tuple2', _0: v0, _1: v1};
									}),
								actual,
								expected)))));
			var _p14 = result;
			if (_p14.ctor === 'Just') {
				return _p14._0;
			} else {
				var _p15 = A2(
					_elm_lang$core$Basics$compare,
					_elm_lang$core$List$length(actual),
					_elm_lang$core$List$length(expected));
				switch (_p15.ctor) {
					case 'GT':
						return _elm_community$elm_test$Expect$fail(
							A3(
								_elm_community$elm_test$Expect$reportFailure,
								'Expect.equalLists was longer than',
								_elm_lang$core$Basics$toString(expected),
								_elm_lang$core$Basics$toString(actual)));
					case 'LT':
						return _elm_community$elm_test$Expect$fail(
							A3(
								_elm_community$elm_test$Expect$reportFailure,
								'Expect.equalLists was shorter than',
								_elm_lang$core$Basics$toString(expected),
								_elm_lang$core$Basics$toString(actual)));
					default:
						return _elm_community$elm_test$Expect$pass;
				}
			}
		}
	});
var _elm_community$elm_test$Expect$false = F2(
	function (message, bool) {
		return bool ? _elm_community$elm_test$Expect$fail(message) : _elm_community$elm_test$Expect$pass;
	});
var _elm_community$elm_test$Expect$true = F2(
	function (message, bool) {
		return bool ? _elm_community$elm_test$Expect$pass : _elm_community$elm_test$Expect$fail(message);
	});
var _elm_community$elm_test$Expect$atLeast = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.atLeast',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) > -1;
		}));
var _elm_community$elm_test$Expect$greaterThan = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.greaterThan',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) > 0;
		}));
var _elm_community$elm_test$Expect$atMost = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.atMost',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
		}));
var _elm_community$elm_test$Expect$lessThan = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.lessThan',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) < 0;
		}));
var _elm_community$elm_test$Expect$notEqual = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.notEqual',
	F2(
		function (x, y) {
			return !_elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$elm_test$Expect$equal = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.equal',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$elm_test$Expect$Missing = {ctor: 'Missing'};
var _elm_community$elm_test$Expect$Extra = {ctor: 'Extra'};
var _elm_community$elm_test$Expect$reportCollectionFailure = F5(
	function (comparison, expected, actual, missingKeys, extraKeys) {
		return A2(
			_elm_lang$core$String$join,
			'\n',
			{
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(actual),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						'diff:',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_elm_community$elm_test$Expect$formatDiffs, _elm_community$elm_test$Expect$Missing, missingKeys),
							A2(_elm_community$elm_test$Expect$formatDiffs, _elm_community$elm_test$Expect$Extra, extraKeys))),
					_1: {
						ctor: '::',
						_0: '╷',
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$core$Basics_ops['++'], '│ ', comparison),
							_1: {
								ctor: '::',
								_0: '╵',
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										'diff:',
										A2(
											_elm_lang$core$Basics_ops['++'],
											A2(_elm_community$elm_test$Expect$formatDiffs, _elm_community$elm_test$Expect$Extra, missingKeys),
											A2(_elm_community$elm_test$Expect$formatDiffs, _elm_community$elm_test$Expect$Missing, extraKeys))),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(expected),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
	});
var _elm_community$elm_test$Expect$equalDicts = F2(
	function (expected, actual) {
		if (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$Dict$toList(expected),
			_elm_lang$core$Dict$toList(actual))) {
			return _elm_community$elm_test$Expect$pass;
		} else {
			var differ = F4(
				function (dict, k, v, diffs) {
					return _elm_lang$core$Native_Utils.eq(
						A2(_elm_lang$core$Dict$get, k, dict),
						_elm_lang$core$Maybe$Just(v)) ? diffs : {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: k, _1: v},
						_1: diffs
					};
				});
			var missingKeys = A3(
				_elm_lang$core$Dict$foldr,
				differ(actual),
				{ctor: '[]'},
				expected);
			var extraKeys = A3(
				_elm_lang$core$Dict$foldr,
				differ(expected),
				{ctor: '[]'},
				actual);
			return _elm_community$elm_test$Expect$fail(
				A5(_elm_community$elm_test$Expect$reportCollectionFailure, 'Expect.equalDicts', expected, actual, missingKeys, extraKeys));
		}
	});
var _elm_community$elm_test$Expect$equalSets = F2(
	function (expected, actual) {
		if (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$Set$toList(expected),
			_elm_lang$core$Set$toList(actual))) {
			return _elm_community$elm_test$Expect$pass;
		} else {
			var extraKeys = _elm_lang$core$Set$toList(
				A2(_elm_lang$core$Set$diff, actual, expected));
			var missingKeys = _elm_lang$core$Set$toList(
				A2(_elm_lang$core$Set$diff, expected, actual));
			return _elm_community$elm_test$Expect$fail(
				A5(_elm_community$elm_test$Expect$reportCollectionFailure, 'Expect.equalSets', expected, actual, missingKeys, extraKeys));
		}
	});
