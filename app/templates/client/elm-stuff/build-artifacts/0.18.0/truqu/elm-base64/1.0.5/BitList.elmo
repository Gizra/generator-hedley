var _truqu$elm_base64$BitList$partition = F2(
	function (size, list) {
		if (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(list),
			size) < 1) {
			return {
				ctor: '::',
				_0: list,
				_1: {ctor: '[]'}
			};
		} else {
			var partitionTail = F3(
				function (size, list, res) {
					partitionTail:
					while (true) {
						var _p0 = list;
						if (_p0.ctor === '[]') {
							return res;
						} else {
							var _v1 = size,
								_v2 = A2(_elm_lang$core$List$drop, size, list),
								_v3 = {
								ctor: '::',
								_0: A2(_elm_lang$core$List$take, size, list),
								_1: res
							};
							size = _v1;
							list = _v2;
							res = _v3;
							continue partitionTail;
						}
					}
				});
			return _elm_lang$core$List$reverse(
				A3(
					partitionTail,
					size,
					list,
					{ctor: '[]'}));
		}
	});
var _truqu$elm_base64$BitList$toByteReverse = function (bitList) {
	var _p1 = bitList;
	if (_p1.ctor === '[]') {
		return 0;
	} else {
		if (_p1._0.ctor === 'Off') {
			return 2 * _truqu$elm_base64$BitList$toByteReverse(_p1._1);
		} else {
			return 1 + (2 * _truqu$elm_base64$BitList$toByteReverse(_p1._1));
		}
	}
};
var _truqu$elm_base64$BitList$toByte = function (bitList) {
	return _truqu$elm_base64$BitList$toByteReverse(
		_elm_lang$core$List$reverse(bitList));
};
var _truqu$elm_base64$BitList$Off = {ctor: 'Off'};
var _truqu$elm_base64$BitList$On = {ctor: 'On'};
var _truqu$elm_base64$BitList$fromNumber = function ($int) {
	return _elm_lang$core$Native_Utils.eq($int, 0) ? {ctor: '[]'} : (_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], $int, 2),
		1) ? A2(
		_elm_lang$core$List$append,
		_truqu$elm_base64$BitList$fromNumber(($int / 2) | 0),
		{
			ctor: '::',
			_0: _truqu$elm_base64$BitList$On,
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$core$List$append,
		_truqu$elm_base64$BitList$fromNumber(($int / 2) | 0),
		{
			ctor: '::',
			_0: _truqu$elm_base64$BitList$Off,
			_1: {ctor: '[]'}
		}));
};
var _truqu$elm_base64$BitList$fromNumberWithSize = F2(
	function (number, size) {
		var bitList = _truqu$elm_base64$BitList$fromNumber(number);
		var paddingSize = size - _elm_lang$core$List$length(bitList);
		return A2(
			_elm_lang$core$List$append,
			A2(_elm_lang$core$List$repeat, paddingSize, _truqu$elm_base64$BitList$Off),
			bitList);
	});
var _truqu$elm_base64$BitList$fromByte = function ($byte) {
	return A2(_truqu$elm_base64$BitList$fromNumberWithSize, $byte, 8);
};
