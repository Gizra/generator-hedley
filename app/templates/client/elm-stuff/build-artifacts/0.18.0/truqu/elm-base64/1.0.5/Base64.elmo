var _truqu$elm_base64$Base64$dropLast = F2(
	function (number, list) {
		return _elm_lang$core$List$reverse(
			A2(
				_elm_lang$core$List$drop,
				number,
				_elm_lang$core$List$reverse(list)));
	});
var _truqu$elm_base64$Base64$partitionBits = function (list) {
	var list_ = A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, _truqu$elm_base64$BitList$fromByte, list));
	return A2(
		_elm_lang$core$List$map,
		_truqu$elm_base64$BitList$toByte,
		A2(_truqu$elm_base64$BitList$partition, 6, list_));
};
var _truqu$elm_base64$Base64$base64CharsList = _elm_lang$core$String$toList('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/');
var _truqu$elm_base64$Base64$base64Map = function () {
	var insert = F2(
		function (_p0, dict) {
			var _p1 = _p0;
			return A3(_elm_lang$core$Dict$insert, _p1._1, _p1._0, dict);
		});
	return A3(
		_elm_lang$core$List$foldl,
		insert,
		_elm_lang$core$Dict$empty,
		A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_truqu$elm_base64$Base64$base64CharsList));
}();
var _truqu$elm_base64$Base64$isValid = function (string) {
	var string_ = A2(_elm_lang$core$String$endsWith, '==', string) ? A2(_elm_lang$core$String$dropRight, 2, string) : (A2(_elm_lang$core$String$endsWith, '=', string) ? A2(_elm_lang$core$String$dropRight, 1, string) : string);
	var isBase64Char = function ($char) {
		return A2(_elm_lang$core$Dict$member, $char, _truqu$elm_base64$Base64$base64Map);
	};
	return A2(_elm_lang$core$String$all, isBase64Char, string_);
};
var _truqu$elm_base64$Base64$toBase64BitList = function (string) {
	var endingEquals = A2(_elm_lang$core$String$endsWith, '==', string) ? 2 : (A2(_elm_lang$core$String$endsWith, '=', string) ? 1 : 0);
	var stripped = _elm_lang$core$String$toList(
		A2(_elm_lang$core$String$dropRight, endingEquals, string));
	var base64ToInt = function ($char) {
		var _p2 = A2(_elm_lang$core$Dict$get, $char, _truqu$elm_base64$Base64$base64Map);
		if (_p2.ctor === 'Just') {
			return _p2._0;
		} else {
			return -1;
		}
	};
	var numberList = A2(_elm_lang$core$List$map, base64ToInt, stripped);
	return A2(
		_truqu$elm_base64$Base64$dropLast,
		endingEquals * 2,
		A2(
			_elm_lang$core$List$concatMap,
			A2(_elm_lang$core$Basics$flip, _truqu$elm_base64$BitList$fromNumberWithSize, 6),
			numberList));
};
var _truqu$elm_base64$Base64$toCharList = function (bitList) {
	var array = _elm_lang$core$Array$fromList(_truqu$elm_base64$Base64$base64CharsList);
	var toBase64Char = function (index) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Native_Utils.chr('!'),
			A2(_elm_lang$core$Array$get, index, array));
	};
	var toChars = function (_p3) {
		var _p4 = _p3;
		var _p5 = {ctor: '_Tuple3', _0: _p4._0, _1: _p4._1, _2: _p4._2};
		if (_p5._2 === -1) {
			if (_p5._1 === -1) {
				return A2(
					_elm_lang$core$List$append,
					A2(
						_truqu$elm_base64$Base64$dropLast,
						2,
						A2(
							_elm_lang$core$List$map,
							toBase64Char,
							_truqu$elm_base64$Base64$partitionBits(
								{
									ctor: '::',
									_0: _p5._0,
									_1: {
										ctor: '::',
										_0: 0,
										_1: {
											ctor: '::',
											_0: 0,
											_1: {ctor: '[]'}
										}
									}
								}))),
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.chr('='),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.chr('='),
							_1: {ctor: '[]'}
						}
					});
			} else {
				return A2(
					_elm_lang$core$List$append,
					A2(
						_truqu$elm_base64$Base64$dropLast,
						1,
						A2(
							_elm_lang$core$List$map,
							toBase64Char,
							_truqu$elm_base64$Base64$partitionBits(
								{
									ctor: '::',
									_0: _p5._0,
									_1: {
										ctor: '::',
										_0: _p5._1,
										_1: {
											ctor: '::',
											_0: 0,
											_1: {ctor: '[]'}
										}
									}
								}))),
					{
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.chr('='),
						_1: {ctor: '[]'}
					});
			}
		} else {
			return A2(
				_elm_lang$core$List$map,
				toBase64Char,
				_truqu$elm_base64$Base64$partitionBits(
					{
						ctor: '::',
						_0: _p5._0,
						_1: {
							ctor: '::',
							_0: _p5._1,
							_1: {
								ctor: '::',
								_0: _p5._2,
								_1: {ctor: '[]'}
							}
						}
					}));
		}
	};
	return A2(_elm_lang$core$List$concatMap, toChars, bitList);
};
var _truqu$elm_base64$Base64$toTupleList = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		if (_p6._1.ctor === '::') {
			if (_p6._1._1.ctor === '::') {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: _p6._0, _1: _p6._1._0, _2: _p6._1._1._0},
					_1: _truqu$elm_base64$Base64$toTupleList(_p6._1._1._1)
				};
			} else {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple3', _0: _p6._0, _1: _p6._1._0, _2: -1},
					_1: {ctor: '[]'}
				};
			}
		} else {
			return {
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: _p6._0, _1: -1, _2: -1},
				_1: {ctor: '[]'}
			};
		}
	} else {
		return {ctor: '[]'};
	}
};
var _truqu$elm_base64$Base64$toCodeList = function (string) {
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Char$toCode,
		_elm_lang$core$String$toList(string));
};
var _truqu$elm_base64$Base64$decode = function (s) {
	if (!_truqu$elm_base64$Base64$isValid(s)) {
		return _elm_lang$core$Result$Err('Error while decoding');
	} else {
		var bitList = A2(
			_elm_lang$core$List$map,
			_truqu$elm_base64$BitList$toByte,
			A2(
				_truqu$elm_base64$BitList$partition,
				8,
				_truqu$elm_base64$Base64$toBase64BitList(s)));
		var charList = A2(_elm_lang$core$List$map, _elm_lang$core$Char$fromCode, bitList);
		return _elm_lang$core$Result$Ok(
			_elm_lang$core$String$fromList(charList));
	}
};
var _truqu$elm_base64$Base64$encode = function (s) {
	return _elm_lang$core$Result$Ok(
		_elm_lang$core$String$fromList(
			_truqu$elm_base64$Base64$toCharList(
				_truqu$elm_base64$Base64$toTupleList(
					_truqu$elm_base64$Base64$toCodeList(s)))));
};
